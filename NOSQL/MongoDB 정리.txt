// windows 몽고db서비스 등록
mongod --install --dbpath C:\data\db --logpath C:\data\mongo.log --logappend

//몽고db실행
mongod --dbpath c:\mongodb\var // 몽고DB 서버실행
mongo // 몽고DB 클라이언트실행

use admiin;
db.shutdownServer(); // 서비스 종료


환경설정
mongod --config c:\mongodb\mongodb.conf -install

DB 조회
show dbs;

// 컬랙션 조회
show collections;

데이터베이스 사용
use test;

현재 db명
db;

// db에 컬랙션 만들기
db.createCollection("scores");

//데이터 입력
// 스키마를 따로 만들 필요없이, scores 컬랙션을 만든다.
db.scores.save({a:1});

// 데이터 검색
db.scores.find();
db.scores.find({a:2});
db.scores.find({a:{'$gte':2,'$lte':4}});
db.scores.find({a:{'$in':[2,3,4,]}});
db.scores.find({a:{'$nin':[2,3,4,]}});
db.scores.find({$or:[{'a':{'$lt':1}},{'a':{'$gt':9}}]});
db.scores.find({exam:{$exists:true}});
db.scores.find({}, {a:true, exam:true, _id:false});

db.scores.findOne(); // 1건 검색

db.scores.find({}, { _id:false }).sort({name : 1}) // 데이터 정렬 1이면 오름차순, -1이면 내림차순
db.scores.find().sort({exam : 1}).skip(1).limit(5); // skip : 정해진 숫자만큼 정렬순서대로 건수 제거, limit : 가져올 건수

//비교 연산자
'$gt':'>', '$lt':'<', '$gte:':'>=', '$lte':'<=', '$ne':'!='
'$in' - 'is in array', '$nin' - | in array


// RDBMS의 Table이랑 비슷
show collections; // 데이터 저장단위

// 데이터 저장
db.users.insert({name:'Johnny', languages:['ruby', 'c']});
db.users.save({name:'Johnny', languages:['ruby', 'c']});
db.users.save({name:'Sue', languages:['scala', 'lisp']});

// 데이터 업데이트
db.users.update({name:'Johnny'}, {name:'Cash', languages:['english']});
db.users.update(기존데이터, 변경데이터, upsert, multi);
// upsert : true; // 있으면 업데이트, 없으면 인서트
// multi : true; // 업데이트 대상이 여러 개이면 모두 변경

// 필드 값 추가 & 제거
db.users.update({name:'Cash'}, {'$set':{'age':50}});
db.users.update({name:'Cash'}, {'$unset':{'age':50}});

// 배열의 값 추가 & 제거
db.users.update({name:'Sue'}, {'$push':{'languages':'ruby'}});
db.users.update({name:'Sue'}, {'$pull':{'languages':'scala'}});

// 데이터 삭제
db.users.remove({name:'Sue'});

// 모두삭제
db.users.remove({});

// 컬렉션(테이블) 삭제
db.users.drop();

// 인덱스 확인
db.users.getIndexes();

// 인덱스 추가
db.users.ensureIndex({"name":1}); // 1이면 오름차순, 0이면 내림차순
db.users.ensureIndex({"name":1}, {background:true}); // 백그라운드 모드로 인덱스 추가
db.users.ensureIndex({"name":1}, {unique:true}); // unique 속성을 지정하면 데이터 저장과 검색속도를 늘리는데 도움
db.users.ensureIndex({"name":1}, {unique:true, dropDups:true}); // unique 속성을 이용시, 기존에 이미 중복데이터가 있을때, 데이터를 삭제하고 인덱스 저장

// 인덱스 삭제
db.users.dropIndex({"name": 1};

// 모든 인덱스 삭제
db.users.dropIndexes();

/대량 등록
for(i=0; i<1000000; i++) { db.users.insert({"i":i, "username":"user" + i, "age":Math.floor(Math.random() * 120), "created": new Date() }); }

// 검색시간 확인
db.users.find({"username": "user101"}).explain();

// 샤드
// 샤드서버 실행
mongod -shardsvr -dbpath c:\mongodb\shard1 -port40001
mongod -shardsvr -dbpath c:\mongodb\shard1 -port40002
mongod -shardsvr -dbpath c:\mongodb\shard1 -port40003

// config 서버 실행

// mongos 서버 실행
mongos -configdb localhost:50001 -port 5000 -chunkSize 1

// 샤드 서버 추가
db.rundCommand({addshard:"localhost:40001"});
db.rundCommand({addshard:"localhost:40002"});
db.rundCommand({addshard:"localhost:40003"});

// 샤드 서버 삭제
db.rundCommand({removeshard:"localhost:40001"});

// 샤드 키 지정
db.runCommand({enablesharding:"person"});
db.runCommand({shardcollection:"person.user", key:{_id:1}});

// 현재 샤드 상태 조회
printShardingStatus();

// 복제
// 마스터 서버 실행
mongod -dbpath c:\mongodb\var -port 10000 -master

// 슬레이브 서버 실행
mongod -dbpath c:\mongodb\var2 -port 10001 -slave -source localhost:10000
mongod -dbpath c:\mongodb\var3 -port 10002 -slave -source localhost:10000

// 리플리카셋
// 복제(리플리케이션) 셋에서 프라이머리 서버(마스터)가 죽으면 세컨드리 서버(슬레이브)가 마스터가 되어서 oplog(변경정보)를 가지게 됨
mongod --replSet downSet -dbath c:\data1 -port 10000
mongod --replSet downSet -dbath c:\data2 -port 10001
mongod --replSet downSet -dbath c:\data3 -port 10001
mongo localhost:10000 실행 후
var config = {_id:'downSet'.members:[{_id:0,host:'localhost:10000'},{_id:1,host:'localhost:10001'},{_id:2,host:'localhost:10002'}]};
rs.initiate(config); // 리플리카셋 적용

// 맵리듀스
map(String input_key, String input_value)
for each word w in input_value:
	emit(w, 1);

reduce(String output_key, Iterator<int>):
// output_key : a word
// output_values : a list of counts
int result = 0;
for each v in intermediate values:
	result += v;
emit(output_key, result);

//javascript Map 함수
map = function () {
	var res = this.text.split(" ");
	for (var i in res) {
		key = {word:res[i]};
		value = {count:1};
		emit(key, value);
	}
}


//javascript Requce 함수
reduce = function(key, values) {
	var totalcount = 0;
	for(var i in values) {
		totalcount = values[i].count + totalcount;
	}
	
	return {count:totalcount};
}

db.words.save({text:"read a book"});
db.words.save({text:"write a book"});

// MapReduce 명령 실행
db.words.mapReduce(map, reduce, "wordcount");

// MapReduce 실행 결과 확인
db.wordcount.find();


// Inverted Mapper
데이타셋을 key, value의 리스트로 변경하는 map() 함수

db.actors.insert({actor:"Richard Gere", movies:["pretty Woman", "Runaway Bride", "Chicago"]});
db.actors.insert({actor:"Julia Roberts", movies:["pretty Woman", "Runaway Bride", "Erin Brockovich"]});

map = function () {
	for(var i in this.movies) {
		key = {movie:this.movies[i]};
		value = {actors:[this.actor]};
		emit(key, value);
	}
}

reduce = function (key, values) {
	actor_list = {actors:[]};
	for(var i in values) {
		actor_list.actors =values[i].actors.concat(actor_list.actors);
	}

	return actor_list;
}

// MapReduce 명령 실행
db.actors.mapReduce(map, reduce, "pivot");

// MapReduce 실행 결과 확인
db.pivot.find();


// 데이터 개수 조회
db.person.count();
db.person.find({name : "neo"}).count();

// 중복 제거
db.runCommand({"distinct":"person", "key":"age"});
db.phones.distinct("components.number", {"components.number":{$lt:5550005}});

// group
db.person.group({"key":{"age":1}, "initial":{"count":0}, "reduce": function (obj, prev) { prev.count++; }});


// 집계 프레임워크(Aggregation Framework)
- Pipelines
$project:SELECT절
$match:WEHERE절
$group:GROUP BY절
$sort:ORBER BY절
$limit
$skip
$unwind
$geoNear
- Expresessions
$addToSet
$first
$last
$max
$min
$avg
$push
$sum

db.articles.aggregate({"$project":{"author":1}},{"$group":{"_id":$author", "count":{"$sum":1}}}, {"$sort":{"count":-1}, {"$limit":5});


// 리모트 명령
// 원격지에서 바로 명령어를 실행한 뒤 결과를 받는 것이 가능
db.eval()


// 데이터 백업/복구
// DB Copy
db.copyDataBase("test", "test1");

// DB Dump
mongodump --host 127.0.0.1

// DB Import & Export
mongoexport -h 192.168.1.77 -c things -d test -o "c:\data\db\export\test.exp"
mongoimport -d test -c things --type json --file "c:\data\db\export\test.exp"


// 로그 수집/분석
mongostat -rowcount 50
inserts 초당 insert수
query 초당 query수
update 초당 update수
delete 초당 delete수
getmore 초당 발생 작업수
command Slave를 포함하여 초당 실행되는 명령어 수
flushe 초당 fsync flush 되는 수
mapped 메모리상에 매핑되는 메모리 크기(단위 MB)
vsize 프로세스의 가상 크기(단위 MB)
res 프로세스의 resident 크기(단위 MB)
*faults 초당 발생하는 페이지 폴트 수
*locked 글로벌 Write 락이 발생하는 전체시간에 대한 비율(단위 퍼센트)
Idx miss Btree index를 로드하여 인덱스를 읽을때 페이지 폴트가 나는 비율(단위 퍼센트)
*qr 몽고디비 인스턴스로 부터 Data읽기를 기다리기 위한 client의 queue 길이
qw 몽고디비 인스턴스로 부터 Data쓰기를 기다리는 client의 queue 길이
ar 읽기 작업을 수행중인 Active 클라이언트 수
aw 쓰기 작업을 진행중인 Active 클라이언트 수
netIn 몽고디비로 received된 네트워크 트래픽 양
netOut 몽고디비에서 밖으로 send된 네트워크 트래픽 양
conn 접속된 connection 수
set Replica 이름
repl 리플리케이션 유형 M:Master, SEC:Secondary, REC:Recovering, UNK:Unknown, SLV:Slave

mongotop 5
Ns 데이터베이스명 + 컬렉션명
Db 데이터베이스명(v2.2 이상에서 -locks옵션을 사용하면 출력되지 않음)
Total Mongod프로세스가 해당 콜렉션에서 수행한 작업 총 시간
Read Mongod프로세스가 해당 콜렉션에서 읽기 작업을 수행한 작업 총 시간
Write Mongod프로세스가 해당 콜렉션에서 쓰기 작업을 수행한 작업 총 시간
시간 분석결과를 반환한 시간

mongod -dbpath c:\mongodb\var --rest // 웹모니터링을 할수 있게 DB설정
기본 db 포트 : 27017, 웹모니터링 포트 : 28017

mongod -dbpath c:\mongodb\var -logpath c:\mongodb\testlog.txt // 콘솔상에서 발생하는 DB로그를 output을 파일로 나타낸다.


// 튜닝 방법
db.getProfilingLevel();
db.setProfilingLevel(2);

Level 1이면 100ms 이상 걸린 정보를 저장함, 2일 경우 System에서 발생한 모든정보를 저장
0이면 사용하지 않음

db.system.profile.find(); // 전체 내역 확인
db.system.profile.find({millis:{$gt:5}}); // 특정시간 이상 걸린 정보들만 조회


// 모니터링 도구
RoboMongo 몽고DB GUI 클라이언트
Munin 서버 모니터링 툴
MongoDB Monitoring Service(MMS)
MongoVue
Pandora FMS
Meteor

// 복합 시스템 설계
Application Side Join
Data Export/Import
- 정형화된 데이터(Structured Data) 처리
 : sqoop
 : hiho
- 비정형화된 데이터(Unstructured Data) 처리
 : Flume
 : Scribe
Batch Processing

// 빅데이터 처리 과정
데이터 수집, MapReduce 수행, 처리 결과 데이터 서비스

// 다중플랫폼 지원 채팅 서비스 구축 사례
Redis publish/subscribe 기능 활용, MongoDB 채팅 로그 저장, MySQL 사용자 계정 및 주요 정보 저장